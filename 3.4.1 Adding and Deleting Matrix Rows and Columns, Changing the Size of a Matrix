# 3.4 Adding and Deleting Matrix Rows and Columns
# Technically, matrices are of fixed length and dimensions, 
# so we cannot add or delete rows or columns.
# However, matrices can be reassigned,
# And thus we can achieve the same effect as if we had directly done additions or deletions.

# 3.4.1 Changing the Size of a Matrix
# Recall how we reassign vectors to change their size:

> x
[1] 12 5 13 16 8
> x <- c(x,20) # append 20
> x
[1] 12 5 13 16 8 20
> x <- c(x[1:3],20,x[4:6]) # insert 20
> x
[1] 12 5 13 20 16 8 20
> x <- x[-2:-4]   # delete elements 2 through 4
> x
[1] 12 16 8 20

# In the first case, x is originally of length 5, 
# which we extend to 6 via concatenation and then reassignment.
# We didn't literally change the length of x 
# but instead created a new vector from x and then assigned x to that new vector.

# Reassignment occurs even when you don't see it, as you'll see in Chapter 14.
# For instance, even the innocuous-looking assignment x[2] <- 12 is actually a reassignment.

# Analogous operations can be used to change the size of a matrix, 
# For example, the rbind() (row bind) and cbind() (column bind) functions 
# let you add rows or columns to a matrix.

> one
[1] 1 1 1 1
> z
  [,1] [,2] [,3]
[1,] 1    1    1
[2,] 2    1    0
[3,] 3    0    1
[4,] 4    0    0
> cbind(one,z)
[1,]1 1 1 1
[2,]1 2 1 0
[3,]1 3 0 1
[4,]1 4 0 0

# Here, cbind() creates a new matrix by combining a column of 1s with the columns of z.
# We choose to get a quick printout, 
# but we could have assigned the result to z (or another variable), as follows:

z <- cbind(one,z)

# Note, too, that we could have relied on recycling:

> cbind(1,z)
    [,1] [,2] [,3] [,4]
[1,]   1    1    1    1
[2,]   1    2    1    0
[3,]   1    3    0    1
[4,]   1    4    0    0

# Here, the 1 value was recycled into a vector of four 1 values.
# You can also use the rbind() and cbind() functions as a quick way to create small matrices.
# here's an example:

> q <- cbind(c(1,2),c(3,4))
> q 
    [,1] [,2]
[1,]   1    3
[2,]   2    4

# Be careful with rbind and cbin(), though. 
# Like creating a vector, creating a matrix is time consuming
# (matrices are vectors, after all).
# In the following code, cbind() creates a new matrix:

z <- cbind(one,z)

# The new matrix happens to be reassigned to z;
# That is, we gave it the name z â€“ the same name as the original matrix,
# which is now gone. But the point is that we did incur a time penalty in creating the matrix.
# If we did this repeatedly inside a loop,
# the cumulatibve penalty would be large.

# So if you are adding rows or columns one at a time within a loop,
# and the matrix will eventually become large,
# It's better to allocate a large matrix in the first place.
# It will be empty at first, but you fill in the rows or columns one at a time,
# rather than doing a time-consuming matrix memory allocation each time.
# You can delete rows or columns by reassignment, too.

> m <- matrix(1:6,nrow=3)
> m
    [,1] [,2]
[1,]   1    4
[2,]   2    5
[3,]   3    6
> m <-[c(1,3),]
> m
    [,1] [,2]
[1,]   1    4
[2,]   3    6
