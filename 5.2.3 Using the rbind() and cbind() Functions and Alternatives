# The rbind() and cbind() matrix functions introduced in Section 3.4 work with data frames, too,
# providing that you have compatible sizes, of course.
# For instance, you can use cbind() to add a new column that has the same length as the existing columns.
# In using rbind() to add a row, the added row is typically in the form of another data frame or list.

> d
   kids  ages
1  Jack    12
2  Jill    10
> rbind(d,list("Laura",19))
   kids  ages
1  Jack    12
2  Jill    10
3  Laura   19

# You can also create new columns from old ones.
# For instance, we can add a variable that is the difference between exams 1 and 2:

> eq <- cbind(examsquiz,examsquiz$Exam.2-examsquiz$Exam.1)
> class(eq)
[1] "data.frame"
> head(eq)
  Exam.1 Exam.2 Quiz examsquiz$Exam.2 - examsquiz$Exam.1
1 2.0 3.3 4.0 1.3
2 3.3 2.0 3.7 -1.3
3 4.0 4.0 4.0 0.0
4 2.3 0.0 3.3 -2.3
5 2.3 1.0 3.3 -1.3
6 3.3 3.7 4.0 0.4

# The new name is rather unwieldy: It's long, and it had embedded blanks.
# We could change it, using the names() function, 
# but it would be better to exploit the list basis of data frames 
# and add a column (of the same length) to the data frame for this result:

> examsquiz$ExamDiff <- examsquiz$Exam.3 - examsquiz$Exam.1
> head(examsquiz)
  Exam.1 Exam.2 Quiz ExamDiff
1    2.0    3.3  4.0      1.3
2    3.3    2.0  3.7     -1.3
3    4.0    4.0  4.0      0.0
4    2.3    0.0  3.3     -2.3
5    2.3    1.0  3.3     -1.3
6    3.3    3.7  4.0      0.4

# What happened here?
# Since one can add a new component to an already existing list at any time, we did so:
# We added a component ExamDiff to the list/data frame examquiz.

# We can even exploit recycling to add a column that is of a different length than those in the data frame:

> d
  kids ages
1 Jack   12
2 Jill   10
> d$one <- 1
> d
  kids  ages  one
1 Jack    12    1
2 Jill    10    1
