# Vectors
# Main data type in R is the vector.
# We'll look at how vectors relate to some other data types in R
# in R, individual numbers (scalars) do not have a separate data type (unlike C family languages)
# individual numbers are special cases of vectors. 
# (in C family languages, matrices are special cases of vectors)

# Recycling - the automatic lengthening of vectors in certain settings
# Filtering - the extraction of subsets of vectors
# Vectorization - where functions are applied element-wise to vectors

# All these operations are central to R programming

# 2.1 Scalars, Vectors, Arrays, and Matrices.

# vector variables are considered different from scalars (single-number variables).

# The following is an example of C code:
int x;
int y[3];
# This requests the compiler to allocate space 
# for a single integer named x 
# and a three-element integer array (C terminology comparable to R's vector type) named y.

# but in R, numbers are actually considered one-element vectors, and has no such thing as scalar.
# R variable types are called modes.
# All elements of a vector must have the same mode, 
# which can be integer, numeric (floating-point number), character (string), logical (Boolean), complex, etc.
# If you need program code to check the variable x, query it  by the call typeof(x).
# vector indices in R begin at 1. (unlike vector indices in ALGOL-family languages, such as C and Python)

# 2.1.1 Adding and Deleting Vector Elements.
# Vectors are stored like arrays in C, contiguously (connecting to/ next to) 
# That's why you cannot insert or delete elements (which you can do in Python)
# The size of a vector is determined at its creation
# So if you want to add or delete elements, 
# you'll have to reassign the vector
# example: add an element to the middle of a four-element vector:
> x <- c(88,5,12,13)
> x <- c(x[1:3],168,x[4]) # insert 168 before the 13
> x 
[1] 88 5 12 168 13

# Here we created a four-element vector and assigned it to x. 
# To insert a new number 168 between the third and fourth elements,
# we strung together the first three elements of x,
# then the 168, 
# then the fourth element of x.
# This creates a new five-element vector, leaving x intact for the time being
# We then assigned that new vector to x.

# in the result, it appears as if we had actually changed the vector stored in x,
# but really we created a new vector and stored that vector in x.
# this difference may seem subtle but it has implications.
# for instance, in some cases, it may restrict the potential for fast performance in R (chapter 14)

# 2.1.2 Obtaining the length of a Vector
# You can obtain the length of a vector by using the length() function:
> x <- c(1,2,4)
> length(x)
[1] 3

# In this example, we already know the length of x, so there really is no need to query it.
# But in writing general function code, you'll often need to know the lengths of vector arguments.
# make a function that determines 
# the index of the first 1 value 
# in the function's vector argument
# (assuming we are sure there is such a value)
# here is one way to write the code:

first1 <- function(x) {
  for (i in 1:length(x)) {
    if (x[1] == 1) break # break out of loop
  }
  return(i)
}
}
