# ॐ मणि पद्मे हूँ
# 1.1 How to run R

# R operates in two modes: "interactive" and "batch"
# Interactive mode: 
# - type in commands
# - R displays results
# - repeat
# Batch mode:
# - does not require interaction with user
# - useful for production jobs, because you can automate process
# : ie., when a program must be run periodically, like once a day.

# 1.1.1 Interactive Mode
# Start R session on Mac:
# - type R on the command line in Terminal.

# Start R session on Windows:
# - Click R Icon

# - it spits back a greeting a R prompt (an R prompt is the > sign).
# - From here, you can execute R commands.
# - the window that all this coding is viewed in, is called the "R console".

# Example: standard normal distribution (with mean 0 and variance 1).
# If random variable X has that distribution:
# - its values - centered around 0, some negative, some positive, averaging in the end to 0.

# make a new random variable Y = |X|.
# - since we've taken the absolute value, the values of Y will NOT be centered around 0.
# - mean of Y will be positive.

# Find the mean of Y. Approach based on example of N(0,1) variates.

>mean(abs(rnorm(100)))
[1] 0.7194236

# 1. - generates 100 random variates
# 2. - finds the absolute values from these 100 random variates
# 3. - finds the mean of the absolute values.

# [1] means that in the first line is the first item (useful when there is a lot of output, lots of items spread over many lines)
# example: two rows of output/ six items in each row -> second row is labeled [7]
> rnorm(10)
[1] -0.6427784 -1.0416696 -1.4020476 -0.6718250 -0.9590894 -0.8684650
[7] -0.5974668 0.6877001 1.3577618 -2.2794378

# there are 10 values in the output
# label [7] in the second row shows in 0.6877001 is the eighth output item

# you can store R commands in a file.
# R code file convention: .R or .r
# if you created a code file called z.R, you can execute the contents of the file by the following command:

> source("z.R")

1.1.2 Batch Mode

# automate R sessions
# ie. Automatically generate a graph without manually launching R and manually executing a script.
# example of graph-making code in file named z.R

pdf("xh.pdf") # set graphical output file
hist(rnorm(100)) # generate 100 N(0,1) variates and plot their histogram
dev.off() # close the graphical output file

# pdf() is a function to tell R that we want the graph we create to be saved in the PDF file xh.pdf
# rnorm () means "random normal" which generates 100 N(0,1) random variates.
# hist() to the variates to draw a histogram of these values
# dev.off() closes the graphical "device" which is xh.pdf - it causes the file to be written to the disk.

# to run the code automatically, without entering R's interactive mode, 
# - we call R with an operating system shell command
# - ie. $ prompt commonly used in Linux systems.
$ R CMD BATCH z.R

# confirm it worked by opening it up the histogram in a PDF viewer.

1.2 A First R Session
# start with a simple data set (R vocabulary refers it to a "vector")
# This data sethas the numbers 1,2,4 and name it "x"
> x <- c(1,2,4)
# R's standard assignment operator is <- and = (but "=" is usually reserved for special situations).
# - no fixed types associated with variables
# - here a vector is assigned to x, but might assign somrthing of a different type to it.
# - c stands for concatenate
# - here we are concatenating 1,2,4 meaning we are concatenating three one-element vectors that consist of those numbers.
# - because any number is also considered a one-element vector.

> q <- c(x,x,8)
# - which sets q to (1,2,4,1,2,4,8)
# confirm that the data is really in x
# - by printing the vector to the screen.
# - by typing its name. 
# - (if you type any variable name/ expression while in interactive mode, R will print out that variable/ expression)
> x
[1] 1 2 4
# confirmed: x consists of 1,2,4.
# - individual elements of a vector are accessed via [].

# how to print out third element of x:
> x[3]
[1] 4
# the selector (here it's 3) is called the "index" or "subscript"
# elements of R vectors are indexed starting from "1", not "0".
# Subsetting is an operation on vectors.
# Subsetting example:

> x <- c(1,2,4)
> x[2:3]
[1] 2 4
# the expression x[2:3] refers to subvector of x consisting of elements 2 through 3, which are 2 and 4 here.

# Find the mean and standard deviation of data set:
> mean(x)
[1] 2.333333
> sd(x)
[1] 1.527525
# first line's expression is the function call mean(x)
# the return value is printed automatically, without needing the call to R's print() function.
# If we want to save ethe computed mean in a variable instead of just printing it to the screen:
> y <- mean(x)
# confirm that Y contains the mean of x:
> y
[1] 2.333333

# comments valuable for documenting program code, and also useful in interactive sessions, since R records the command history.
> y # print out y
[1] 2.333333

# use R's internal data sets, get a list of data sets:
> data()

# data set called Nile (contains data on the flow of the Nile River)
# find the mean and standard deviation of this data set:

> mean(Nile)
[1] 919.35
> sd(Nile) # sd: standard deviation?
[1] 169.2275

# Plot histogram of the data:
> hist(Nile)
# window pops up with the histogram in it.
# hist(z,breaks=12) draws a histogram os data set z with 12 bins.

# Quit R by calling the q() function or alternatively pressing CTRL-D in Linux or CMD-D on a Mac:
> q()
Save workspace image? [y/n/c]: n
# asks if you want to save your variables so that you can resume work on it later.
# selecting y: all objects will load automaticvally next time you run R, and saves session's command history.


